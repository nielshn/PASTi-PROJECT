{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.getEventSourceWrapper = getEventSourceWrapper;\nvar eventCallbacks = [];\nfunction EventSourceWrapper(options) {\n  var source;\n  var lastActivity = new Date();\n  var listeners = [];\n  if (!options.timeout) {\n    options.timeout = 20 * 1000;\n  }\n  init();\n  var timer = setInterval(function () {\n    if (new Date() - lastActivity > options.timeout) {\n      handleDisconnect();\n    }\n  }, options.timeout / 2);\n  function init() {\n    source = new window.EventSource(options.path);\n    source.onopen = handleOnline;\n    source.onerror = handleDisconnect;\n    source.onmessage = handleMessage;\n  }\n  function handleOnline() {\n    if (options.log) console.log('[HMR] connected');\n    lastActivity = new Date();\n  }\n  function handleMessage(event) {\n    lastActivity = new Date();\n    for (var i = 0; i < listeners.length; i++) {\n      listeners[i](event);\n    }\n    if (event.data.indexOf('action') !== -1) {\n      eventCallbacks.forEach(function (cb) {\n        return cb(event);\n      });\n    }\n  }\n  function handleDisconnect() {\n    clearInterval(timer);\n    source.close();\n    setTimeout(init, options.timeout);\n  }\n  return {\n    close: function close() {\n      clearInterval(timer);\n      source.close();\n    },\n    addMessageListener: function addMessageListener(fn) {\n      listeners.push(fn);\n    }\n  };\n}\n_c = EventSourceWrapper;\nfunction getEventSourceWrapper(options) {\n  if (!options.ondemand) {\n    return {\n      addMessageListener: function addMessageListener(cb) {\n        eventCallbacks.push(cb);\n      }\n    };\n  }\n  return EventSourceWrapper(options);\n}\nvar _c;\n$RefreshReg$(_c, \"EventSourceWrapper\");","map":{"version":3,"sources":["../../../../client/dev/error-overlay/eventsource.js"],"names":["eventCallbacks","EventSourceWrapper","options","source","lastActivity","Date","listeners","timeout","init","timer","setInterval","handleDisconnect","window","EventSource","path","onopen","handleOnline","onerror","onmessage","handleMessage","log","console","event","i","length","data","indexOf","forEach","cb","clearInterval","close","setTimeout","addMessageListener","fn","push","getEventSourceWrapper","ondemand"],"mappings":";;;;AAAA,IAAMA,cAAc,GAAG,EAAvB;AAEA,SAASC,kBAAT,CAA4BC,OAA5B,EAAqC;EACnC,IAAIC,MAAJ;EACA,IAAIC,YAAY,GAAG,IAAIC,IAAJ,CAAA,CAAnB;EACA,IAAIC,SAAS,GAAG,EAAhB;EAEA,IAAI,CAACJ,OAAO,CAACK,OAAb,EAAsB;IACpBL,OAAO,CAACK,OAARL,GAAkB,EAAA,GAAK,IAAvBA;EACD;EAEDM,IAAI,CAAA,CAAA;EACJ,IAAIC,KAAK,GAAGC,WAAW,CAAC,YAAY;IAClC,IAAI,IAAIL,IAAJ,CAAA,CAAA,GAAaD,YAAb,GAA4BF,OAAO,CAACK,OAAxC,EAAiD;MAC/CI,gBAAgB,CAAA,CAAA;IACjB;EACF,CAJsB,EAIpBT,OAAO,CAACK,OAARL,GAAkB,CAJE,CAAvB;EAMA,SAASM,IAAT,CAAA,EAAgB;IACdL,MAAM,GAAG,IAAIS,MAAM,CAACC,WAAX,CAAuBX,OAAO,CAACY,IAA/B,CAATX;IACAA,MAAM,CAACY,MAAPZ,GAAgBa,YAAhBb;IACAA,MAAM,CAACc,OAAPd,GAAiBQ,gBAAjBR;IACAA,MAAM,CAACe,SAAPf,GAAmBgB,aAAnBhB;EACD;EAED,SAASa,YAAT,CAAA,EAAwB;IACtB,IAAId,OAAO,CAACkB,GAAZ,EAAiBC,OAAO,CAACD,GAARC,CAAY,iBAAZA,CAAAA;IACjBjB,YAAY,GAAG,IAAIC,IAAJ,CAAA,CAAfD;EACD;EAED,SAASe,aAAT,CAAuBG,KAAvB,EAA8B;IAC5BlB,YAAY,GAAG,IAAIC,IAAJ,CAAA,CAAfD;IACA,KAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,SAAS,CAACkB,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;MACzCjB,SAAS,CAACiB,CAAD,CAATjB,CAAagB,KAAbhB,CAAAA;IACD;IACD,IAAIgB,KAAK,CAACG,IAANH,CAAWI,OAAXJ,CAAmB,QAAnBA,CAAAA,KAAiC,CAAC,CAAtC,EAAyC;MACvCtB,cAAc,CAAC2B,OAAf3B,CAAwB4B,UAAAA,EAAD;QAAA,OAAQA,EAAE,CAACN,KAAD,CAAjCtB;MAAAA,EAAAA;IACD;EACF;EAED,SAASW,gBAAT,CAAA,EAA4B;IAC1BkB,aAAa,CAACpB,KAAD,CAAboB;IACA1B,MAAM,CAAC2B,KAAP3B,CAAAA,CAAAA;IACA4B,UAAU,CAACvB,IAAD,EAAON,OAAO,CAACK,OAAf,CAAVwB;EACD;EAED,OAAO;IACLD,KAAK,EAAE,SAAA,MAAA,EAAM;MACXD,aAAa,CAACpB,KAAD,CAAboB;MACA1B,MAAM,CAAC2B,KAAP3B,CAAAA,CAAAA;IACD,CAJI;IAKL6B,kBAAkB,EAAE,SAAA,mBAAUC,EAAV,EAAc;MAChC3B,SAAS,CAAC4B,IAAV5B,CAAe2B,EAAf3B,CAAAA;IACD;EAPI,CAAP;AASD;AAEM,EAAA,GAvDEL,kBAAT;AAuDO,SAASkC,qBAAT,CAA+BjC,OAA/B,EAAwC;EAC7C,IAAI,CAACA,OAAO,CAACkC,QAAb,EAAuB;IACrB,OAAO;MACLJ,kBAAkB,EAAGJ,SAAAA,mBAAAA,EAAD,EAAQ;QAC1B5B,cAAc,CAACkC,IAAflC,CAAoB4B,EAApB5B,CAAAA;MACD;IAHI,CAAP;EAKD;EACD,OAAOC,kBAAkB,CAACC,OAAD,CAAzB;AACD;AAAA,IAAA,EAAA;AAAA,YAAA,CAAA,EAAA","sourcesContent":["const eventCallbacks = []\n\nfunction EventSourceWrapper(options) {\n  var source\n  var lastActivity = new Date()\n  var listeners = []\n\n  if (!options.timeout) {\n    options.timeout = 20 * 1000\n  }\n\n  init()\n  var timer = setInterval(function () {\n    if (new Date() - lastActivity > options.timeout) {\n      handleDisconnect()\n    }\n  }, options.timeout / 2)\n\n  function init() {\n    source = new window.EventSource(options.path)\n    source.onopen = handleOnline\n    source.onerror = handleDisconnect\n    source.onmessage = handleMessage\n  }\n\n  function handleOnline() {\n    if (options.log) console.log('[HMR] connected')\n    lastActivity = new Date()\n  }\n\n  function handleMessage(event) {\n    lastActivity = new Date()\n    for (var i = 0; i < listeners.length; i++) {\n      listeners[i](event)\n    }\n    if (event.data.indexOf('action') !== -1) {\n      eventCallbacks.forEach((cb) => cb(event))\n    }\n  }\n\n  function handleDisconnect() {\n    clearInterval(timer)\n    source.close()\n    setTimeout(init, options.timeout)\n  }\n\n  return {\n    close: () => {\n      clearInterval(timer)\n      source.close()\n    },\n    addMessageListener: function (fn) {\n      listeners.push(fn)\n    },\n  }\n}\n\nexport function getEventSourceWrapper(options) {\n  if (!options.ondemand) {\n    return {\n      addMessageListener: (cb) => {\n        eventCallbacks.push(cb)\n      },\n    }\n  }\n  return EventSourceWrapper(options)\n}\n"]},"metadata":{},"sourceType":"script"}