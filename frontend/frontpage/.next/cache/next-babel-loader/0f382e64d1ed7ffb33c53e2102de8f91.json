{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.addBasePath = addBasePath;\nexports.delBasePath = delBasePath;\nexports.default = void 0;\nvar _url2 = require(\"url\");\nvar _mitt = _interopRequireDefault(require(\"../mitt\"));\nvar _utils = require(\"../utils\");\nvar _isDynamic = require(\"./utils/is-dynamic\");\nvar _routeMatcher = require(\"./utils/route-matcher\");\nvar _routeRegex = require(\"./utils/route-regex\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} /* global __NEXT_DATA__ */ // tslint:disable:no-console\nconst basePath = process.env.__NEXT_ROUTER_BASEPATH || '';\nfunction addBasePath(path) {\n  return path.indexOf(basePath) !== 0 ? basePath + path : path;\n}\nfunction delBasePath(path) {\n  return path.indexOf(basePath) === 0 ? path.substr(basePath.length) || '/' : path;\n}\nfunction toRoute(path) {\n  return path.replace(/\\/$/, '') || '/';\n}\nconst prepareRoute = path => toRoute(!path || path === '/' ? '/index' : path);\nfunction fetchNextData(pathname, query, isServerRender, cb) {\n  let attempts = isServerRender ? 3 : 1;\n  function getResponse() {\n    return fetch((0, _utils.formatWithValidation)({\n      pathname: addBasePath(\n      // @ts-ignore __NEXT_DATA__\n      `/_next/data/${__NEXT_DATA__.buildId}${delBasePath(pathname)}.json`),\n      query\n    }), {\n      // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n      // Cookies may also be required for `getServerSideProps`.\n      //\n      // > `fetch` wonâ€™t send cookies, unless you set the credentials init\n      // > option.\n      // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n      //\n      // > For maximum browser compatibility when it comes to sending &\n      // > receiving cookies, always supply the `credentials: 'same-origin'`\n      // > option instead of relying on the default.\n      // https://github.com/github/fetch#caveats\n      credentials: 'same-origin'\n    }).then(res => {\n      if (!res.ok) {\n        if (--attempts > 0 && res.status >= 500) {\n          return getResponse();\n        }\n        throw new Error(`Failed to load static props`);\n      }\n      return res.json();\n    });\n  }\n  return getResponse().then(data => {\n    return cb ? cb(data) : data;\n  }).catch(err => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n    if (!isServerRender) {\n      ;\n      err.code = 'PAGE_LOAD_ERROR';\n    }\n    throw err;\n  });\n}\nclass Router {\n  /**\n  * Map of all components loaded in `Router`\n  */ // Static Data Cache\n  constructor(_pathname, _query, _as2, {\n    initialProps,\n    pageLoader,\n    App,\n    wrapApp,\n    Component,\n    err,\n    subscription,\n    isFallback\n  }) {\n    this.route = void 0;\n    this.pathname = void 0;\n    this.query = void 0;\n    this.asPath = void 0;\n    this.basePath = void 0;\n    this.components = void 0;\n    this.sdc = {};\n    this.sub = void 0;\n    this.clc = void 0;\n    this.pageLoader = void 0;\n    this._bps = void 0;\n    this.events = void 0;\n    this._wrapApp = void 0;\n    this.isSsr = void 0;\n    this.isFallback = void 0;\n    this.onPopState = e => {\n      if (!e.state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const {\n          pathname,\n          query\n        } = this;\n        this.changeState('replaceState', (0, _utils.formatWithValidation)({\n          pathname,\n          query\n        }), (0, _utils.getURL)());\n        return;\n      } // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n      if (e.state && this.isSsr && e.state.as === this.asPath && (0, _url2.parse)(e.state.url).pathname === this.pathname) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n      if (this._bps && !this._bps(e.state)) {\n        return;\n      }\n      const {\n        url,\n        as,\n        options\n      } = e.state;\n      if (true) {\n        if (typeof url === 'undefined' || typeof as === 'undefined') {\n          console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/vercel/next.js/popstate-state-empty');\n        }\n      }\n      this.replace(url, as, options);\n    };\n    this._getStaticData = asPath => {\n      const pathname = prepareRoute((0, _url2.parse)(asPath).pathname);\n      return false && this.sdc[pathname] ? Promise.resolve(this.sdc[pathname]) : fetchNextData(pathname, null, this.isSsr, data => this.sdc[pathname] = data);\n    };\n    this._getServerData = asPath => {\n      let {\n        pathname,\n        query\n      } = (0, _url2.parse)(asPath, true);\n      pathname = prepareRoute(pathname);\n      return fetchNextData(pathname, query, this.isSsr);\n    }; // represents the current component key\n    this.route = toRoute(_pathname); // set up the component cache (by route keys)\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n    if (_pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP\n      };\n    }\n    this.components['/_app'] = {\n      Component: App\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = _pathname;\n    this.query = _query; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n    this.asPath =\n    // @ts-ignore this is temporarily global (attached to window)\n    (0, _isDynamic.isDynamicRoute)(_pathname) && __NEXT_DATA__.autoExport ? _pathname : _as2;\n    this.basePath = basePath;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating\n    // back from external site\n    this.isSsr = true;\n    this.isFallback = isFallback;\n    if (false) {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (_as2.substr(0, 2) !== '//') {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        this.changeState('replaceState', (0, _utils.formatWithValidation)({\n          pathname: _pathname,\n          query: _query\n        }), _as2);\n      }\n      window.addEventListener('popstate', this.onPopState);\n    }\n  } // @deprecated backwards compatibility even though it's a private method.\n  static _rewriteUrlForNextExport(url) {\n    if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n      const rewriteUrlForNextExport = require('./rewrite-url-for-export').rewriteUrlForNextExport;\n      return rewriteUrlForNextExport(url);\n    } else {\n      return url;\n    }\n  }\n  update(route, mod) {\n    const Component = mod.default || mod;\n    const data = this.components[route];\n    if (!data) {\n      throw new Error(`Cannot update unavailable route: ${route}`);\n    }\n    const newData = Object.assign({}, data, {\n      Component,\n      __N_SSG: mod.__N_SSG,\n      __N_SSP: mod.__N_SSP\n    });\n    this.components[route] = newData; // pages/_app.js updated\n    if (route === '/_app') {\n      this.notify(this.components[this.route]);\n      return;\n    }\n    if (route === this.route) {\n      this.notify(newData);\n    }\n  }\n  reload() {\n    window.location.reload();\n  } /**\n    * Go back in history\n    */\n  back() {\n    window.history.back();\n  } /**\n    * Performs a `pushState` with arguments\n    * @param url of the route\n    * @param as masks `url` for the browser\n    * @param options object you can define `shallow` and other options\n    */\n  push(url, as = url, options = {}) {\n    return this.change('pushState', url, as, options);\n  } /**\n    * Performs a `replaceState` with arguments\n    * @param url of the route\n    * @param as masks `url` for the browser\n    * @param options object you can define `shallow` and other options\n    */\n  replace(url, as = url, options = {}) {\n    return this.change('replaceState', url, as, options);\n  }\n  change(method, _url, _as, options) {\n    return new Promise((resolve, reject) => {\n      if (!options._h) {\n        this.isSsr = false;\n      } // marking route changes as a navigation start entry\n      if (_utils.ST) {\n        performance.mark('routeChange');\n      } // If url and as provided as an object representation,\n      // we'll format them into the string version here.\n      let url = typeof _url === 'object' ? (0, _utils.formatWithValidation)(_url) : _url;\n      let as = typeof _as === 'object' ? (0, _utils.formatWithValidation)(_as) : _as;\n      url = addBasePath(url);\n      as = addBasePath(as); // Add the ending slash to the paths. So, we can serve the\n      // \"<page>/index.html\" directly for the SSR page.\n      if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n        const rewriteUrlForNextExport = require('./rewrite-url-for-export').rewriteUrlForNextExport; // @ts-ignore this is temporarily global (attached to window)\n        if (__NEXT_DATA__.nextExport) {\n          as = rewriteUrlForNextExport(as);\n        }\n      }\n      this.abortComponentLoad(as); // If the url change is only related to a hash change\n      // We should not proceed. We should only change the state.\n      // WARNING: `_h` is an internal option for handing Next.js client-side\n      // hydration. Your app should _never_ use this property. It may change at\n      // any time without notice.\n      if (!options._h && this.onlyAHashChange(as)) {\n        this.asPath = as;\n        Router.events.emit('hashChangeStart', as);\n        this.changeState(method, url, as, options);\n        this.scrollToHash(as);\n        Router.events.emit('hashChangeComplete', as);\n        return resolve(true);\n      }\n      const {\n        pathname,\n        query,\n        protocol\n      } = (0, _url2.parse)(url, true);\n      if (!pathname || protocol) {\n        if (true) {\n          throw new Error(`Invalid href passed to router: ${url} https://err.sh/vercel/next.js/invalid-href-passed`);\n        }\n        return resolve(false);\n      } // If asked to change the current URL we should reload the current page\n      // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n      // We also need to set the method = replaceState always\n      // as this should not go into the history (That's how browsers work)\n      // We should compare the new asPath to the current asPath, not the url\n      if (!this.urlIsNew(as)) {\n        method = 'replaceState';\n      }\n      const route = toRoute(pathname);\n      const {\n        shallow = false\n      } = options;\n      if ((0, _isDynamic.isDynamicRoute)(route)) {\n        const {\n          pathname: asPathname\n        } = (0, _url2.parse)(as);\n        const routeRegex = (0, _routeRegex.getRouteRegex)(route);\n        const routeMatch = (0, _routeMatcher.getRouteMatcher)(routeRegex)(asPathname);\n        if (!routeMatch) {\n          const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param]);\n          if (missingParams.length > 0) {\n            if (true) {\n              console.warn(`Mismatching \\`as\\` and \\`href\\` failed to manually provide ` + `the params: ${missingParams.join(', ')} in the \\`href\\`'s \\`query\\``);\n            }\n            return reject(new Error(`The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). ` + `Read more: https://err.sh/vercel/next.js/incompatible-href-as`));\n          }\n        } else {\n          // Merge params into `query`, overwriting any specified in search\n          Object.assign(query, routeMatch);\n        }\n      }\n      Router.events.emit('routeChangeStart', as); // If shallow is true and the route exists in the router cache we reuse the previous result\n      this.getRouteInfo(route, pathname, query, as, shallow).then(routeInfo => {\n        const {\n          error\n        } = routeInfo;\n        if (error && error.cancelled) {\n          return resolve(false);\n        }\n        Router.events.emit('beforeHistoryChange', as);\n        this.changeState(method, url, as, options);\n        if (true) {\n          const appComp = this.components['/_app'].Component;\n          window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;\n        }\n        this.set(route, pathname, query, as, routeInfo).then(() => {\n          if (error) {\n            Router.events.emit('routeChangeError', error, as);\n            throw error;\n          }\n          Router.events.emit('routeChangeComplete', as);\n          return resolve(true);\n        });\n      }, reject);\n    });\n  }\n  changeState(method, url, as, options = {}) {\n    if (true) {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`);\n        return;\n      }\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`);\n        return;\n      }\n    }\n    if (method !== 'pushState' || (0, _utils.getURL)() !== as) {\n      window.history[method]({\n        url,\n        as,\n        options\n      },\n      // Most browsers currently ignores this parameter, although they may use it in the future.\n      // Passing the empty string here should be safe against future changes to the method.\n      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n      '', as);\n    }\n  }\n  getRouteInfo(route, pathname, query, as, shallow = false) {\n    const cachedRouteInfo = this.components[route]; // If there is a shallow route transition possible\n    // If the route is already rendered on the screen.\n    if (shallow && cachedRouteInfo && this.route === route) {\n      return Promise.resolve(cachedRouteInfo);\n    }\n    const handleError = (err, loadErrorFail) => {\n      return new Promise(resolve => {\n        if (err.code === 'PAGE_LOAD_ERROR' || loadErrorFail) {\n          // If we can't load the page it could be one of following reasons\n          //  1. Page doesn't exists\n          //  2. Page does exist in a different zone\n          //  3. Internal error while loading the page\n          // So, doing a hard reload is the proper way to deal with this.\n          window.location.href = as; // Changing the URL doesn't block executing the current code path.\n          // So, we need to mark it as a cancelled error and stop the routing logic.\n          err.cancelled = true; // @ts-ignore TODO: fix the control flow here\n          return resolve({\n            error: err\n          });\n        }\n        if (err.cancelled) {\n          // @ts-ignore TODO: fix the control flow here\n          return resolve({\n            error: err\n          });\n        }\n        resolve(this.fetchComponent('/_error').then(res => {\n          const {\n            page: Component\n          } = res;\n          const routeInfo = {\n            Component,\n            err\n          };\n          return new Promise(resolve => {\n            this.getInitialProps(Component, {\n              err,\n              pathname,\n              query\n            }).then(props => {\n              routeInfo.props = props;\n              routeInfo.error = err;\n              resolve(routeInfo);\n            }, gipErr => {\n              console.error('Error in error page `getInitialProps`: ', gipErr);\n              routeInfo.error = err;\n              routeInfo.props = {};\n              resolve(routeInfo);\n            });\n          });\n        }).catch(err => handleError(err, true)));\n      });\n    };\n    return new Promise((resolve, reject) => {\n      if (cachedRouteInfo) {\n        return resolve(cachedRouteInfo);\n      }\n      this.fetchComponent(route).then(res => resolve({\n        Component: res.page,\n        __N_SSG: res.mod.__N_SSG,\n        __N_SSP: res.mod.__N_SSP\n      }), reject);\n    }).then(routeInfo => {\n      const {\n        Component,\n        __N_SSG,\n        __N_SSP\n      } = routeInfo;\n      if (true) {\n        const {\n          isValidElementType\n        } = require('react-is');\n        if (!isValidElementType(Component)) {\n          throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n        }\n      }\n      return this._getData(() => __N_SSG ? this._getStaticData(as) : __N_SSP ? this._getServerData(as) : this.getInitialProps(Component,\n      // we provide AppTree later so this needs to be `any`\n      {\n        pathname,\n        query,\n        asPath: as\n      })).then(props => {\n        routeInfo.props = props;\n        this.components[route] = routeInfo;\n        return routeInfo;\n      });\n    }).catch(handleError);\n  }\n  set(route, pathname, query, as, data) {\n    this.isFallback = false;\n    this.route = route;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    return this.notify(data);\n  } /**\n    * Callback to execute before replacing router state\n    * @param cb callback to be executed\n    */\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    } // If the urls are change, there's more than a hash change\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    } // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n    return oldHash !== newHash;\n  }\n  scrollToHash(as) {\n    const [, hash] = as.split('#'); // Scroll to top if the hash is just `#` with no value\n    if (hash === '') {\n      window.scrollTo(0, 0);\n      return;\n    } // First we check if the element by id is found\n    const idEl = document.getElementById(hash);\n    if (idEl) {\n      idEl.scrollIntoView();\n      return;\n    } // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n    const nameEl = document.getElementsByName(hash)[0];\n    if (nameEl) {\n      nameEl.scrollIntoView();\n    }\n  }\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  } /**\n    * Prefetch page code, you may wait for the data during page rendering.\n    * This feature only works in production!\n    * @param url the href of prefetched page\n    * @param asPath the as path of the prefetched page\n    */\n  prefetch(url, asPath = url, options = {}) {\n    return new Promise((resolve, reject) => {\n      const {\n        pathname,\n        protocol\n      } = (0, _url2.parse)(url);\n      if (!pathname || protocol) {\n        if (true) {\n          throw new Error(`Invalid href passed to router: ${url} https://err.sh/vercel/next.js/invalid-href-passed`);\n        }\n        return;\n      } // Prefetch is not supported in development mode because it would trigger on-demand-entries\n      if (true) {\n        return;\n      }\n      const route = delBasePath(toRoute(pathname));\n      Promise.all([this.pageLoader.prefetchData(url, delBasePath(asPath)), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]).then(() => resolve(), reject);\n    });\n  }\n  async fetchComponent(route) {\n    let cancelled = false;\n    const cancel = this.clc = () => {\n      cancelled = true;\n    };\n    route = delBasePath(route);\n    const componentResult = await this.pageLoader.loadPage(route);\n    if (cancelled) {\n      const error = new Error(`Abort fetching component for route: \"${route}\"`);\n      error.cancelled = true;\n      throw error;\n    }\n    if (cancel === this.clc) {\n      this.clc = null;\n    }\n    return componentResult;\n  }\n  _getData(fn) {\n    let cancelled = false;\n    const cancel = () => {\n      cancelled = true;\n    };\n    this.clc = cancel;\n    return fn().then(data => {\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n      if (cancelled) {\n        const err = new Error('Loading initial props cancelled');\n        err.cancelled = true;\n        throw err;\n      }\n      return data;\n    });\n  }\n  getInitialProps(Component, ctx) {\n    const {\n      Component: App\n    } = this.components['/_app'];\n    const AppTree = this._wrapApp(App);\n    ctx.AppTree = AppTree;\n    return (0, _utils.loadGetInitialProps)(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx\n    });\n  }\n  abortComponentLoad(as) {\n    if (this.clc) {\n      const e = new Error('Route Cancelled');\n      e.cancelled = true;\n      Router.events.emit('routeChangeError', e, as);\n      this.clc();\n      this.clc = null;\n    }\n  }\n  notify(data) {\n    return this.sub(data, this.components['/_app'].Component);\n  }\n}\nexports.default = Router;\nRouter.events = (0, _mitt.default)();","map":{"version":3,"sources":["../../../../next-server/lib/router/router.ts"],"names":["basePath","process","env","__NEXT_ROUTER_BASEPATH","addBasePath","path","indexOf","delBasePath","substr","length","toRoute","replace","prepareRoute","fetchNextData","pathname","query","isServerRender","cb","attempts","getResponse","__NEXT_DATA__","buildId","credentials","then","res","ok","status","Error","json","data","catch","err","code","Router","route","asPath","components","sdc","sub","clc","pageLoader","_bps","events","_wrapApp","isSsr","isFallback","constructor","as","initialProps","App","wrapApp","Component","subscription","props","__N_SSG","__N_SSP","autoExport","changeState","window","addEventListener","onPopState","_rewriteUrlForNextExport","url","__NEXT_EXPORT_TRAILING_SLASH","rewriteUrlForNextExport","require","e","state","options","console","warn","update","mod","default","newData","Object","assign","notify","reload","location","back","history","push","change","method","_url","_as","Promise","resolve","reject","_h","ST","performance","mark","nextExport","abortComponentLoad","onlyAHashChange","emit","scrollToHash","protocol","urlIsNew","shallow","asPathname","routeRegex","routeMatch","missingParams","keys","groups","filter","param","join","getRouteInfo","routeInfo","error","cancelled","appComp","next","isPrerendered","getInitialProps","origGetInitialProps","set","cachedRouteInfo","handleError","loadErrorFail","href","fetchComponent","page","gipErr","isValidElementType","_getData","_getStaticData","_getServerData","beforePopState","oldUrlNoHash","oldHash","split","newUrlNoHash","newHash","hash","scrollTo","idEl","document","getElementById","scrollIntoView","nameEl","getElementsByName","prefetch","all","prefetchData","priority","cancel","componentResult","loadPage","fn","ctx","AppTree","router"],"mappings":"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","sourcesContent":["/* global __NEXT_DATA__ */\n// tslint:disable:no-console\nimport { ParsedUrlQuery } from 'querystring'\nimport { ComponentType } from 'react'\nimport { parse, UrlObject } from 'url'\nimport mitt, { MittEmitter } from '../mitt'\nimport {\n  AppContextType,\n  formatWithValidation,\n  getURL,\n  loadGetInitialProps,\n  NextPageContext,\n  ST,\n} from '../utils'\nimport { isDynamicRoute } from './utils/is-dynamic'\nimport { getRouteMatcher } from './utils/route-matcher'\nimport { getRouteRegex } from './utils/route-regex'\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nexport function addBasePath(path: string): string {\n  return path.indexOf(basePath) !== 0 ? basePath + path : path\n}\n\nexport function delBasePath(path: string): string {\n  return path.indexOf(basePath) === 0\n    ? path.substr(basePath.length) || '/'\n    : path\n}\n\nfunction toRoute(path: string): string {\n  return path.replace(/\\/$/, '') || '/'\n}\n\nconst prepareRoute = (path: string) =>\n  toRoute(!path || path === '/' ? '/index' : path)\n\ntype Url = UrlObject | string\n\ntype ComponentRes = { page: ComponentType; mod: any }\n\nexport type BaseRouter = {\n  route: string\n  pathname: string\n  query: ParsedUrlQuery\n  asPath: string\n  basePath: string\n}\n\nexport type NextRouter = BaseRouter &\n  Pick<\n    Router,\n    | 'push'\n    | 'replace'\n    | 'reload'\n    | 'back'\n    | 'prefetch'\n    | 'beforePopState'\n    | 'events'\n    | 'isFallback'\n  >\n\nexport type PrefetchOptions = {\n  priority?: boolean\n}\n\ntype RouteInfo = {\n  Component: ComponentType\n  __N_SSG?: boolean\n  __N_SSP?: boolean\n  props?: any\n  err?: Error\n  error?: any\n}\n\ntype Subscription = (data: RouteInfo, App?: ComponentType) => Promise<void>\n\ntype BeforePopStateCallback = (state: any) => boolean\n\ntype ComponentLoadCancel = (() => void) | null\n\ntype HistoryMethod = 'replaceState' | 'pushState'\n\nfunction fetchNextData(\n  pathname: string,\n  query: ParsedUrlQuery | null,\n  isServerRender: boolean,\n  cb?: (...args: any) => any\n) {\n  let attempts = isServerRender ? 3 : 1\n  function getResponse(): Promise<any> {\n    return fetch(\n      formatWithValidation({\n        pathname: addBasePath(\n          // @ts-ignore __NEXT_DATA__\n          `/_next/data/${__NEXT_DATA__.buildId}${delBasePath(pathname)}.json`\n        ),\n        query,\n      }),\n      {\n        // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n        // Cookies may also be required for `getServerSideProps`.\n        //\n        // > `fetch` wonâ€™t send cookies, unless you set the credentials init\n        // > option.\n        // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n        //\n        // > For maximum browser compatibility when it comes to sending &\n        // > receiving cookies, always supply the `credentials: 'same-origin'`\n        // > option instead of relying on the default.\n        // https://github.com/github/fetch#caveats\n        credentials: 'same-origin',\n      }\n    ).then((res) => {\n      if (!res.ok) {\n        if (--attempts > 0 && res.status >= 500) {\n          return getResponse()\n        }\n        throw new Error(`Failed to load static props`)\n      }\n      return res.json()\n    })\n  }\n\n  return getResponse()\n    .then((data) => {\n      return cb ? cb(data) : data\n    })\n    .catch((err: Error) => {\n      // We should only trigger a server-side transition if this was caused\n      // on a client-side transition. Otherwise, we'd get into an infinite\n      // loop.\n      if (!isServerRender) {\n        ;(err as any).code = 'PAGE_LOAD_ERROR'\n      }\n      throw err\n    })\n}\n\nexport default class Router implements BaseRouter {\n  route: string\n  pathname: string\n  query: ParsedUrlQuery\n  asPath: string\n  basePath: string\n\n  /**\n   * Map of all components loaded in `Router`\n   */\n  components: { [pathname: string]: RouteInfo }\n  // Static Data Cache\n  sdc: { [asPath: string]: object } = {}\n  sub: Subscription\n  clc: ComponentLoadCancel\n  pageLoader: any\n  _bps: BeforePopStateCallback | undefined\n  events: MittEmitter\n  _wrapApp: (App: ComponentType) => any\n  isSsr: boolean\n  isFallback: boolean\n\n  static events: MittEmitter = mitt()\n\n  constructor(\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    {\n      initialProps,\n      pageLoader,\n      App,\n      wrapApp,\n      Component,\n      err,\n      subscription,\n      isFallback,\n    }: {\n      subscription: Subscription\n      initialProps: any\n      pageLoader: any\n      Component: ComponentType\n      App: ComponentType\n      wrapApp: (App: ComponentType) => any\n      err?: Error\n      isFallback: boolean\n    }\n  ) {\n    // represents the current component key\n    this.route = toRoute(pathname)\n\n    // set up the component cache (by route keys)\n    this.components = {}\n    // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n    if (pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP,\n      }\n    }\n\n    this.components['/_app'] = { Component: App }\n\n    // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    this.events = Router.events\n\n    this.pageLoader = pageLoader\n    this.pathname = pathname\n    this.query = query\n    // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n    this.asPath =\n      // @ts-ignore this is temporarily global (attached to window)\n      isDynamicRoute(pathname) && __NEXT_DATA__.autoExport ? pathname : as\n    this.basePath = basePath\n    this.sub = subscription\n    this.clc = null\n    this._wrapApp = wrapApp\n    // make sure to ignore extra popState in safari on navigating\n    // back from external site\n    this.isSsr = true\n\n    this.isFallback = isFallback\n\n    if (typeof window !== 'undefined') {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (as.substr(0, 2) !== '//') {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        this.changeState(\n          'replaceState',\n          formatWithValidation({ pathname, query }),\n          as\n        )\n      }\n\n      window.addEventListener('popstate', this.onPopState)\n    }\n  }\n\n  // @deprecated backwards compatibility even though it's a private method.\n  static _rewriteUrlForNextExport(url: string): string {\n    if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n      const rewriteUrlForNextExport = require('./rewrite-url-for-export')\n        .rewriteUrlForNextExport\n      return rewriteUrlForNextExport(url)\n    } else {\n      return url\n    }\n  }\n\n  onPopState = (e: PopStateEvent): void => {\n    if (!e.state) {\n      // We get state as undefined for two reasons.\n      //  1. With older safari (< 8) and older chrome (< 34)\n      //  2. When the URL changed with #\n      //\n      // In the both cases, we don't need to proceed and change the route.\n      // (as it's already changed)\n      // But we can simply replace the state with the new changes.\n      // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n      // So, doing the following for (1) does no harm.\n      const { pathname, query } = this\n      this.changeState(\n        'replaceState',\n        formatWithValidation({ pathname, query }),\n        getURL()\n      )\n      return\n    }\n\n    // Make sure we don't re-render on initial load,\n    // can be caused by navigating back from an external site\n    if (\n      e.state &&\n      this.isSsr &&\n      e.state.as === this.asPath &&\n      parse(e.state.url).pathname === this.pathname\n    ) {\n      return\n    }\n\n    // If the downstream application returns falsy, return.\n    // They will then be responsible for handling the event.\n    if (this._bps && !this._bps(e.state)) {\n      return\n    }\n\n    const { url, as, options } = e.state\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof url === 'undefined' || typeof as === 'undefined') {\n        console.warn(\n          '`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/vercel/next.js/popstate-state-empty'\n        )\n      }\n    }\n    this.replace(url, as, options)\n  }\n\n  update(route: string, mod: any) {\n    const Component: ComponentType = mod.default || mod\n    const data = this.components[route]\n    if (!data) {\n      throw new Error(`Cannot update unavailable route: ${route}`)\n    }\n\n    const newData = Object.assign({}, data, {\n      Component,\n      __N_SSG: mod.__N_SSG,\n      __N_SSP: mod.__N_SSP,\n    })\n    this.components[route] = newData\n\n    // pages/_app.js updated\n    if (route === '/_app') {\n      this.notify(this.components[this.route])\n      return\n    }\n\n    if (route === this.route) {\n      this.notify(newData)\n    }\n  }\n\n  reload(): void {\n    window.location.reload()\n  }\n\n  /**\n   * Go back in history\n   */\n  back() {\n    window.history.back()\n  }\n\n  /**\n   * Performs a `pushState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  push(url: Url, as: Url = url, options = {}) {\n    return this.change('pushState', url, as, options)\n  }\n\n  /**\n   * Performs a `replaceState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  replace(url: Url, as: Url = url, options = {}) {\n    return this.change('replaceState', url, as, options)\n  }\n\n  change(\n    method: HistoryMethod,\n    _url: Url,\n    _as: Url,\n    options: any\n  ): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (!options._h) {\n        this.isSsr = false\n      }\n      // marking route changes as a navigation start entry\n      if (ST) {\n        performance.mark('routeChange')\n      }\n\n      // If url and as provided as an object representation,\n      // we'll format them into the string version here.\n      let url = typeof _url === 'object' ? formatWithValidation(_url) : _url\n      let as = typeof _as === 'object' ? formatWithValidation(_as) : _as\n\n      url = addBasePath(url)\n      as = addBasePath(as)\n\n      // Add the ending slash to the paths. So, we can serve the\n      // \"<page>/index.html\" directly for the SSR page.\n      if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n        const rewriteUrlForNextExport = require('./rewrite-url-for-export')\n          .rewriteUrlForNextExport\n        // @ts-ignore this is temporarily global (attached to window)\n        if (__NEXT_DATA__.nextExport) {\n          as = rewriteUrlForNextExport(as)\n        }\n      }\n\n      this.abortComponentLoad(as)\n\n      // If the url change is only related to a hash change\n      // We should not proceed. We should only change the state.\n\n      // WARNING: `_h` is an internal option for handing Next.js client-side\n      // hydration. Your app should _never_ use this property. It may change at\n      // any time without notice.\n      if (!options._h && this.onlyAHashChange(as)) {\n        this.asPath = as\n        Router.events.emit('hashChangeStart', as)\n        this.changeState(method, url, as, options)\n        this.scrollToHash(as)\n        Router.events.emit('hashChangeComplete', as)\n        return resolve(true)\n      }\n\n      const { pathname, query, protocol } = parse(url, true)\n\n      if (!pathname || protocol) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            `Invalid href passed to router: ${url} https://err.sh/vercel/next.js/invalid-href-passed`\n          )\n        }\n        return resolve(false)\n      }\n\n      // If asked to change the current URL we should reload the current page\n      // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n      // We also need to set the method = replaceState always\n      // as this should not go into the history (That's how browsers work)\n      // We should compare the new asPath to the current asPath, not the url\n      if (!this.urlIsNew(as)) {\n        method = 'replaceState'\n      }\n\n      const route = toRoute(pathname)\n      const { shallow = false } = options\n\n      if (isDynamicRoute(route)) {\n        const { pathname: asPathname } = parse(as)\n        const routeRegex = getRouteRegex(route)\n        const routeMatch = getRouteMatcher(routeRegex)(asPathname)\n        if (!routeMatch) {\n          const missingParams = Object.keys(routeRegex.groups).filter(\n            (param) => !query[param]\n          )\n\n          if (missingParams.length > 0) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Mismatching \\`as\\` and \\`href\\` failed to manually provide ` +\n                  `the params: ${missingParams.join(\n                    ', '\n                  )} in the \\`href\\`'s \\`query\\``\n              )\n            }\n\n            return reject(\n              new Error(\n                `The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). ` +\n                  `Read more: https://err.sh/vercel/next.js/incompatible-href-as`\n              )\n            )\n          }\n        } else {\n          // Merge params into `query`, overwriting any specified in search\n          Object.assign(query, routeMatch)\n        }\n      }\n\n      Router.events.emit('routeChangeStart', as)\n\n      // If shallow is true and the route exists in the router cache we reuse the previous result\n      this.getRouteInfo(route, pathname, query, as, shallow).then(\n        (routeInfo) => {\n          const { error } = routeInfo\n\n          if (error && error.cancelled) {\n            return resolve(false)\n          }\n\n          Router.events.emit('beforeHistoryChange', as)\n          this.changeState(method, url, as, options)\n\n          if (process.env.NODE_ENV !== 'production') {\n            const appComp: any = this.components['/_app'].Component\n            ;(window as any).next.isPrerendered =\n              appComp.getInitialProps === appComp.origGetInitialProps &&\n              !(routeInfo.Component as any).getInitialProps\n          }\n\n          this.set(route, pathname, query, as, routeInfo).then(() => {\n            if (error) {\n              Router.events.emit('routeChangeError', error, as)\n              throw error\n            }\n\n            Router.events.emit('routeChangeComplete', as)\n            return resolve(true)\n          })\n        },\n        reject\n      )\n    })\n  }\n\n  changeState(\n    method: HistoryMethod,\n    url: string,\n    as: string,\n    options = {}\n  ): void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`)\n        return\n      }\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`)\n        return\n      }\n    }\n\n    if (method !== 'pushState' || getURL() !== as) {\n      window.history[method](\n        {\n          url,\n          as,\n          options,\n        },\n        // Most browsers currently ignores this parameter, although they may use it in the future.\n        // Passing the empty string here should be safe against future changes to the method.\n        // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n        '',\n        as\n      )\n    }\n  }\n\n  getRouteInfo(\n    route: string,\n    pathname: string,\n    query: any,\n    as: string,\n    shallow: boolean = false\n  ): Promise<RouteInfo> {\n    const cachedRouteInfo = this.components[route]\n\n    // If there is a shallow route transition possible\n    // If the route is already rendered on the screen.\n    if (shallow && cachedRouteInfo && this.route === route) {\n      return Promise.resolve(cachedRouteInfo)\n    }\n\n    const handleError = (\n      err: Error & { code: any; cancelled: boolean },\n      loadErrorFail?: boolean\n    ) => {\n      return new Promise((resolve) => {\n        if (err.code === 'PAGE_LOAD_ERROR' || loadErrorFail) {\n          // If we can't load the page it could be one of following reasons\n          //  1. Page doesn't exists\n          //  2. Page does exist in a different zone\n          //  3. Internal error while loading the page\n\n          // So, doing a hard reload is the proper way to deal with this.\n          window.location.href = as\n\n          // Changing the URL doesn't block executing the current code path.\n          // So, we need to mark it as a cancelled error and stop the routing logic.\n          err.cancelled = true\n          // @ts-ignore TODO: fix the control flow here\n          return resolve({ error: err })\n        }\n\n        if (err.cancelled) {\n          // @ts-ignore TODO: fix the control flow here\n          return resolve({ error: err })\n        }\n\n        resolve(\n          this.fetchComponent('/_error')\n            .then((res) => {\n              const { page: Component } = res\n              const routeInfo: RouteInfo = { Component, err }\n              return new Promise((resolve) => {\n                this.getInitialProps(Component, {\n                  err,\n                  pathname,\n                  query,\n                } as any).then(\n                  (props) => {\n                    routeInfo.props = props\n                    routeInfo.error = err\n                    resolve(routeInfo)\n                  },\n                  (gipErr) => {\n                    console.error(\n                      'Error in error page `getInitialProps`: ',\n                      gipErr\n                    )\n                    routeInfo.error = err\n                    routeInfo.props = {}\n                    resolve(routeInfo)\n                  }\n                )\n              }) as Promise<RouteInfo>\n            })\n            .catch((err) => handleError(err, true))\n        )\n      }) as Promise<RouteInfo>\n    }\n\n    return (new Promise((resolve, reject) => {\n      if (cachedRouteInfo) {\n        return resolve(cachedRouteInfo)\n      }\n\n      this.fetchComponent(route).then(\n        (res) =>\n          resolve({\n            Component: res.page,\n            __N_SSG: res.mod.__N_SSG,\n            __N_SSP: res.mod.__N_SSP,\n          }),\n        reject\n      )\n    }) as Promise<RouteInfo>)\n      .then((routeInfo: RouteInfo) => {\n        const { Component, __N_SSG, __N_SSP } = routeInfo\n\n        if (process.env.NODE_ENV !== 'production') {\n          const { isValidElementType } = require('react-is')\n          if (!isValidElementType(Component)) {\n            throw new Error(\n              `The default export is not a React Component in page: \"${pathname}\"`\n            )\n          }\n        }\n\n        return this._getData<RouteInfo>(() =>\n          __N_SSG\n            ? this._getStaticData(as)\n            : __N_SSP\n            ? this._getServerData(as)\n            : this.getInitialProps(\n                Component,\n                // we provide AppTree later so this needs to be `any`\n                {\n                  pathname,\n                  query,\n                  asPath: as,\n                } as any\n              )\n        ).then((props) => {\n          routeInfo.props = props\n          this.components[route] = routeInfo\n          return routeInfo\n        })\n      })\n      .catch(handleError)\n  }\n\n  set(\n    route: string,\n    pathname: string,\n    query: any,\n    as: string,\n    data: RouteInfo\n  ): Promise<void> {\n    this.isFallback = false\n\n    this.route = route\n    this.pathname = pathname\n    this.query = query\n    this.asPath = as\n    return this.notify(data)\n  }\n\n  /**\n   * Callback to execute before replacing router state\n   * @param cb callback to be executed\n   */\n  beforePopState(cb: BeforePopStateCallback) {\n    this._bps = cb\n  }\n\n  onlyAHashChange(as: string): boolean {\n    if (!this.asPath) return false\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#')\n    const [newUrlNoHash, newHash] = as.split('#')\n\n    // Makes sure we scroll to the provided hash if the url/hash are the same\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true\n    }\n\n    // If the urls are change, there's more than a hash change\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false\n    }\n\n    // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n    return oldHash !== newHash\n  }\n\n  scrollToHash(as: string): void {\n    const [, hash] = as.split('#')\n    // Scroll to top if the hash is just `#` with no value\n    if (hash === '') {\n      window.scrollTo(0, 0)\n      return\n    }\n\n    // First we check if the element by id is found\n    const idEl = document.getElementById(hash)\n    if (idEl) {\n      idEl.scrollIntoView()\n      return\n    }\n    // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n    const nameEl = document.getElementsByName(hash)[0]\n    if (nameEl) {\n      nameEl.scrollIntoView()\n    }\n  }\n\n  urlIsNew(asPath: string): boolean {\n    return this.asPath !== asPath\n  }\n\n  /**\n   * Prefetch page code, you may wait for the data during page rendering.\n   * This feature only works in production!\n   * @param url the href of prefetched page\n   * @param asPath the as path of the prefetched page\n   */\n  prefetch(\n    url: string,\n    asPath: string = url,\n    options: PrefetchOptions = {}\n  ): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const { pathname, protocol } = parse(url)\n\n      if (!pathname || protocol) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            `Invalid href passed to router: ${url} https://err.sh/vercel/next.js/invalid-href-passed`\n          )\n        }\n        return\n      }\n\n      // Prefetch is not supported in development mode because it would trigger on-demand-entries\n      if (process.env.NODE_ENV !== 'production') {\n        return\n      }\n      const route = delBasePath(toRoute(pathname))\n      Promise.all([\n        this.pageLoader.prefetchData(url, delBasePath(asPath)),\n        this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route),\n      ]).then(() => resolve(), reject)\n    })\n  }\n\n  async fetchComponent(route: string): Promise<ComponentRes> {\n    let cancelled = false\n    const cancel = (this.clc = () => {\n      cancelled = true\n    })\n    route = delBasePath(route)\n\n    const componentResult = await this.pageLoader.loadPage(route)\n\n    if (cancelled) {\n      const error: any = new Error(\n        `Abort fetching component for route: \"${route}\"`\n      )\n      error.cancelled = true\n      throw error\n    }\n\n    if (cancel === this.clc) {\n      this.clc = null\n    }\n\n    return componentResult\n  }\n\n  _getData<T>(fn: () => Promise<T>): Promise<T> {\n    let cancelled = false\n    const cancel = () => {\n      cancelled = true\n    }\n    this.clc = cancel\n    return fn().then((data) => {\n      if (cancel === this.clc) {\n        this.clc = null\n      }\n\n      if (cancelled) {\n        const err: any = new Error('Loading initial props cancelled')\n        err.cancelled = true\n        throw err\n      }\n\n      return data\n    })\n  }\n\n  _getStaticData = (asPath: string): Promise<object> => {\n    const pathname = prepareRoute(parse(asPath).pathname!)\n\n    return process.env.NODE_ENV === 'production' && this.sdc[pathname]\n      ? Promise.resolve(this.sdc[pathname])\n      : fetchNextData(\n          pathname,\n          null,\n          this.isSsr,\n          (data) => (this.sdc[pathname] = data)\n        )\n  }\n\n  _getServerData = (asPath: string): Promise<object> => {\n    let { pathname, query } = parse(asPath, true)\n    pathname = prepareRoute(pathname!)\n    return fetchNextData(pathname, query, this.isSsr)\n  }\n\n  getInitialProps(\n    Component: ComponentType,\n    ctx: NextPageContext\n  ): Promise<any> {\n    const { Component: App } = this.components['/_app']\n    const AppTree = this._wrapApp(App)\n    ctx.AppTree = AppTree\n    return loadGetInitialProps<AppContextType<Router>>(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx,\n    })\n  }\n\n  abortComponentLoad(as: string): void {\n    if (this.clc) {\n      const e = new Error('Route Cancelled')\n      ;(e as any).cancelled = true\n      Router.events.emit('routeChangeError', e, as)\n      this.clc()\n      this.clc = null\n    }\n  }\n\n  notify(data: RouteInfo): Promise<void> {\n    return this.sub(data, this.components['/_app'].Component)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}