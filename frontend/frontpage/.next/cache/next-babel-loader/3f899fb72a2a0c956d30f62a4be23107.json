{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.defaultHead = defaultHead;\nexports[\"default\"] = void 0;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _sideEffect = _interopRequireDefault(require(\"./side-effect\"));\nvar _ampContext = require(\"./amp-context\");\nvar _headManagerContext = require(\"./head-manager-context\");\nvar _amp = require(\"./amp\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction defaultHead() {\n  var inAmpMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var head = [/*#__PURE__*/_react[\"default\"].createElement(\"meta\", {\n    charSet: \"utf-8\"\n  })];\n  if (!inAmpMode) {\n    head.push( /*#__PURE__*/_react[\"default\"].createElement(\"meta\", {\n      name: \"viewport\",\n      content: \"width=device-width\"\n    }));\n  }\n  return head;\n}\nfunction onlyReactElement(list, child) {\n  // React children can be \"string\" or \"number\" in this case we ignore them for backwards compat\n  if (typeof child === 'string' || typeof child === 'number') {\n    return list;\n  } // Adds support for React.Fragment\n  if (child.type === _react[\"default\"].Fragment) {\n    return list.concat(_react[\"default\"].Children.toArray(child.props.children).reduce(function (fragmentList, fragmentChild) {\n      if (typeof fragmentChild === 'string' || typeof fragmentChild === 'number') {\n        return fragmentList;\n      }\n      return fragmentList.concat(fragmentChild);\n    }, []));\n  }\n  return list.concat(child);\n}\nvar METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp']; /*\n                                                              returns a function for filtering head child elements\n                                                              which shouldn't be duplicated, like <title/>\n                                                              Also adds support for deduplicated `key` properties\n                                                              */\nfunction unique() {\n  var keys = new Set();\n  var tags = new Set();\n  var metaTypes = new Set();\n  var metaCategories = {};\n  return function (h) {\n    var unique = true;\n    if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {\n      var key = h.key.slice(h.key.indexOf('$') + 1);\n      if (keys.has(key)) {\n        unique = false;\n      } else {\n        keys.add(key);\n      }\n    } // eslint-disable-next-line default-case\n    switch (h.type) {\n      case 'title':\n      case 'base':\n        if (tags.has(h.type)) {\n          unique = false;\n        } else {\n          tags.add(h.type);\n        }\n        break;\n      case 'meta':\n        for (var i = 0, len = METATYPES.length; i < len; i++) {\n          var metatype = METATYPES[i];\n          if (!h.props.hasOwnProperty(metatype)) continue;\n          if (metatype === 'charSet') {\n            if (metaTypes.has(metatype)) {\n              unique = false;\n            } else {\n              metaTypes.add(metatype);\n            }\n          } else {\n            var category = h.props[metatype];\n            var categories = metaCategories[metatype] || new Set();\n            if (categories.has(category)) {\n              unique = false;\n            } else {\n              categories.add(category);\n              metaCategories[metatype] = categories;\n            }\n          }\n        }\n        break;\n    }\n    return unique;\n  };\n} /**\n  *\n  * @param headElements List of multiple <Head> instances\n  */\nfunction reduceComponents(headElements, props) {\n  return headElements.reduce(function (list, headElement) {\n    var headElementChildren = _react[\"default\"].Children.toArray(headElement.props.children);\n    return list.concat(headElementChildren);\n  }, []).reduce(onlyReactElement, []).reverse().concat(defaultHead(props.inAmpMode)).filter(unique()).reverse().map(function (c, i) {\n    var key = c.key || i;\n    return _react[\"default\"].cloneElement(c, {\n      key: key\n    });\n  });\n}\nvar Effect = (0, _sideEffect[\"default\"])(); /**\n                                            * This component injects elements to `<head>` of your page.\n                                            * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.\n                                            */\nfunction Head(_ref) {\n  var children = _ref.children;\n  return /*#__PURE__*/_react[\"default\"].createElement(_ampContext.AmpStateContext.Consumer, null, function (ampState) {\n    return /*#__PURE__*/_react[\"default\"].createElement(_headManagerContext.HeadManagerContext.Consumer, null, function (updateHead) {\n      return /*#__PURE__*/_react[\"default\"].createElement(Effect, {\n        reduceComponentsToState: reduceComponents,\n        handleStateChange: updateHead,\n        inAmpMode: (0, _amp.isInAmpMode)(ampState)\n      }, children);\n    });\n  });\n}\n_c = Head;\nHead.rewind = Effect.rewind;\nvar _default = Head;\nexports[\"default\"] = _default;\nvar _c;\n$RefreshReg$(_c, \"Head\");","map":{"version":3,"sources":["../../../next-server/lib/head.tsx"],"names":["defaultHead","inAmpMode","head","push","onlyReactElement","list","child","type","React","Fragment","concat","Children","toArray","props","children","reduce","fragmentList","fragmentChild","METATYPES","unique","keys","Set","tags","metaTypes","metaCategories","h","key","indexOf","slice","has","add","i","len","length","metatype","hasOwnProperty","category","categories","reduceComponents","headElements","headElement","headElementChildren","reverse","filter","map","c","cloneElement","Effect","Head","ampState","updateHead","rewind"],"mappings":"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","sourcesContent":["import React from 'react'\nimport withSideEffect from './side-effect'\nimport { AmpStateContext } from './amp-context'\nimport { HeadManagerContext } from './head-manager-context'\nimport { isInAmpMode } from './amp'\n\ntype WithInAmpMode = {\n  inAmpMode?: boolean\n}\n\nexport function defaultHead(inAmpMode = false): JSX.Element[] {\n  const head = [<meta charSet=\"utf-8\" />]\n  if (!inAmpMode) {\n    head.push(<meta name=\"viewport\" content=\"width=device-width\" />)\n  }\n  return head\n}\n\nfunction onlyReactElement(\n  list: Array<React.ReactElement<any>>,\n  child: React.ReactChild\n): Array<React.ReactElement<any>> {\n  // React children can be \"string\" or \"number\" in this case we ignore them for backwards compat\n  if (typeof child === 'string' || typeof child === 'number') {\n    return list\n  }\n  // Adds support for React.Fragment\n  if (child.type === React.Fragment) {\n    return list.concat(\n      React.Children.toArray(child.props.children).reduce(\n        (\n          fragmentList: Array<React.ReactElement<any>>,\n          fragmentChild: React.ReactChild\n        ): Array<React.ReactElement<any>> => {\n          if (\n            typeof fragmentChild === 'string' ||\n            typeof fragmentChild === 'number'\n          ) {\n            return fragmentList\n          }\n          return fragmentList.concat(fragmentChild)\n        },\n        []\n      )\n    )\n  }\n  return list.concat(child)\n}\n\nconst METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp']\n\n/*\n returns a function for filtering head child elements\n which shouldn't be duplicated, like <title/>\n Also adds support for deduplicated `key` properties\n*/\nfunction unique() {\n  const keys = new Set()\n  const tags = new Set()\n  const metaTypes = new Set()\n  const metaCategories: { [metatype: string]: Set<string> } = {}\n\n  return (h: React.ReactElement<any>) => {\n    let unique = true\n\n    if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {\n      const key = h.key.slice(h.key.indexOf('$') + 1)\n      if (keys.has(key)) {\n        unique = false\n      } else {\n        keys.add(key)\n      }\n    }\n\n    // eslint-disable-next-line default-case\n    switch (h.type) {\n      case 'title':\n      case 'base':\n        if (tags.has(h.type)) {\n          unique = false\n        } else {\n          tags.add(h.type)\n        }\n        break\n      case 'meta':\n        for (let i = 0, len = METATYPES.length; i < len; i++) {\n          const metatype = METATYPES[i]\n          if (!h.props.hasOwnProperty(metatype)) continue\n\n          if (metatype === 'charSet') {\n            if (metaTypes.has(metatype)) {\n              unique = false\n            } else {\n              metaTypes.add(metatype)\n            }\n          } else {\n            const category = h.props[metatype]\n            const categories = metaCategories[metatype] || new Set()\n            if (categories.has(category)) {\n              unique = false\n            } else {\n              categories.add(category)\n              metaCategories[metatype] = categories\n            }\n          }\n        }\n        break\n    }\n\n    return unique\n  }\n}\n\n/**\n *\n * @param headElements List of multiple <Head> instances\n */\nfunction reduceComponents(\n  headElements: Array<React.ReactElement<any>>,\n  props: WithInAmpMode\n) {\n  return headElements\n    .reduce(\n      (list: React.ReactChild[], headElement: React.ReactElement<any>) => {\n        const headElementChildren = React.Children.toArray(\n          headElement.props.children\n        )\n        return list.concat(headElementChildren)\n      },\n      []\n    )\n    .reduce(onlyReactElement, [])\n    .reverse()\n    .concat(defaultHead(props.inAmpMode))\n    .filter(unique())\n    .reverse()\n    .map((c: React.ReactElement<any>, i: number) => {\n      const key = c.key || i\n      return React.cloneElement(c, { key })\n    })\n}\n\nconst Effect = withSideEffect()\n\n/**\n * This component injects elements to `<head>` of your page.\n * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.\n */\nfunction Head({ children }: { children: React.ReactNode }) {\n  return (\n    <AmpStateContext.Consumer>\n      {(ampState) => (\n        <HeadManagerContext.Consumer>\n          {(updateHead) => (\n            <Effect\n              reduceComponentsToState={reduceComponents}\n              handleStateChange={updateHead}\n              inAmpMode={isInAmpMode(ampState)}\n            >\n              {children}\n            </Effect>\n          )}\n        </HeadManagerContext.Consumer>\n      )}\n    </AmpStateContext.Consumer>\n  )\n}\n\nHead.rewind = Effect.rewind\n\nexport default Head\n"]},"metadata":{},"sourceType":"script"}